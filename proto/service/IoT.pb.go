// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.15.8
// source: IoT.proto

package IoT

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_ARDUINO      DeviceType = 0
	DeviceType_RASPBERRYPI  DeviceType = 1
	DeviceType_PLC_Siemens  DeviceType = 2
	DeviceType_PLC_Beckhoff DeviceType = 3
	DeviceType_PLC_WAGO     DeviceType = 4
	DeviceType_OPC          DeviceType = 5
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "ARDUINO",
		1: "RASPBERRYPI",
		2: "PLC_Siemens",
		3: "PLC_Beckhoff",
		4: "PLC_WAGO",
		5: "OPC",
	}
	DeviceType_value = map[string]int32{
		"ARDUINO":      0,
		"RASPBERRYPI":  1,
		"PLC_Siemens":  2,
		"PLC_Beckhoff": 3,
		"PLC_WAGO":     4,
		"OPC":          5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{0}
}

type SensorDataType int32

const (
	SensorDataType_BOOL     SensorDataType = 0
	SensorDataType_BYTE     SensorDataType = 1
	SensorDataType_INT      SensorDataType = 2
	SensorDataType_FLOAT    SensorDataType = 3
	SensorDataType_DOUBLE   SensorDataType = 4
	SensorDataType_STRING   SensorDataType = 5
	SensorDataType_DATETIME SensorDataType = 6
)

// Enum value maps for SensorDataType.
var (
	SensorDataType_name = map[int32]string{
		0: "BOOL",
		1: "BYTE",
		2: "INT",
		3: "FLOAT",
		4: "DOUBLE",
		5: "STRING",
		6: "DATETIME",
	}
	SensorDataType_value = map[string]int32{
		"BOOL":     0,
		"BYTE":     1,
		"INT":      2,
		"FLOAT":    3,
		"DOUBLE":   4,
		"STRING":   5,
		"DATETIME": 6,
	}
)

func (x SensorDataType) Enum() *SensorDataType {
	p := new(SensorDataType)
	*p = x
	return p
}

func (x SensorDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[1].Descriptor()
}

func (SensorDataType) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[1]
}

func (x SensorDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorDataType.Descriptor instead.
func (SensorDataType) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{1}
}

type GPIOType int32

const (
	GPIOType_Input        GPIOType = 0
	GPIOType_Output       GPIOType = 1
	GPIOType_AnalogInput  GPIOType = 2
	GPIOType_AnalogOutput GPIOType = 3
)

// Enum value maps for GPIOType.
var (
	GPIOType_name = map[int32]string{
		0: "Input",
		1: "Output",
		2: "AnalogInput",
		3: "AnalogOutput",
	}
	GPIOType_value = map[string]int32{
		"Input":        0,
		"Output":       1,
		"AnalogInput":  2,
		"AnalogOutput": 3,
	}
)

func (x GPIOType) Enum() *GPIOType {
	p := new(GPIOType)
	*p = x
	return p
}

func (x GPIOType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPIOType) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[2].Descriptor()
}

func (GPIOType) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[2]
}

func (x GPIOType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPIOType.Descriptor instead.
func (GPIOType) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{2}
}

type PLCDataArea int32

const (
	PLCDataArea_DB PLCDataArea = 0
	PLCDataArea_MK PLCDataArea = 1
	PLCDataArea_PE PLCDataArea = 2
	PLCDataArea_PA PLCDataArea = 3
	PLCDataArea_CT PLCDataArea = 4
)

// Enum value maps for PLCDataArea.
var (
	PLCDataArea_name = map[int32]string{
		0: "DB",
		1: "MK",
		2: "PE",
		3: "PA",
		4: "CT",
	}
	PLCDataArea_value = map[string]int32{
		"DB": 0,
		"MK": 1,
		"PE": 2,
		"PA": 3,
		"CT": 4,
	}
)

func (x PLCDataArea) Enum() *PLCDataArea {
	p := new(PLCDataArea)
	*p = x
	return p
}

func (x PLCDataArea) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLCDataArea) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[3].Descriptor()
}

func (PLCDataArea) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[3]
}

func (x PLCDataArea) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLCDataArea.Descriptor instead.
func (PLCDataArea) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{3}
}

type RecordType int32

const (
	RecordType_EQUAL        RecordType = 0
	RecordType_ODD          RecordType = 1
	RecordType_SMALLER_THEN RecordType = 2
	RecordType_BIGGER_THEN  RecordType = 3
	RecordType_RANGE        RecordType = 4
	RecordType_ALWAYS       RecordType = 5
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "EQUAL",
		1: "ODD",
		2: "SMALLER_THEN",
		3: "BIGGER_THEN",
		4: "RANGE",
		5: "ALWAYS",
	}
	RecordType_value = map[string]int32{
		"EQUAL":        0,
		"ODD":          1,
		"SMALLER_THEN": 2,
		"BIGGER_THEN":  3,
		"RANGE":        4,
		"ALWAYS":       5,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[4].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[4]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{4}
}

type FilterTime int32

const (
	FilterTime_NOW         FilterTime = 0
	FilterTime_LAST_24H    FilterTime = 1
	FilterTime_LAST_WEEK   FilterTime = 2
	FilterTime_LAST_MONTH  FilterTime = 3
	FilterTime_LAST_3MONTH FilterTime = 4
	FilterTime_LAST_6MONTH FilterTime = 5
	FilterTime_LAST_YEAR   FilterTime = 6
	FilterTime_ALL         FilterTime = 7
)

// Enum value maps for FilterTime.
var (
	FilterTime_name = map[int32]string{
		0: "NOW",
		1: "LAST_24H",
		2: "LAST_WEEK",
		3: "LAST_MONTH",
		4: "LAST_3MONTH",
		5: "LAST_6MONTH",
		6: "LAST_YEAR",
		7: "ALL",
	}
	FilterTime_value = map[string]int32{
		"NOW":         0,
		"LAST_24H":    1,
		"LAST_WEEK":   2,
		"LAST_MONTH":  3,
		"LAST_3MONTH": 4,
		"LAST_6MONTH": 5,
		"LAST_YEAR":   6,
		"ALL":         7,
	}
)

func (x FilterTime) Enum() *FilterTime {
	p := new(FilterTime)
	*p = x
	return p
}

func (x FilterTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterTime) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[5].Descriptor()
}

func (FilterTime) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[5]
}

func (x FilterTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterTime.Descriptor instead.
func (FilterTime) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{5}
}

type FilterValue int32

const (
	FilterValue_EQUAL_VALUE        FilterValue = 0
	FilterValue_ODD_VALUE          FilterValue = 1
	FilterValue_SMALLER_THEN_VALUE FilterValue = 2
	FilterValue_BIGGER_THEN_VALUE  FilterValue = 3
	FilterValue_RANGE_VALUE        FilterValue = 4
	FilterValue_ALL_VALUE          FilterValue = 5
)

// Enum value maps for FilterValue.
var (
	FilterValue_name = map[int32]string{
		0: "EQUAL_VALUE",
		1: "ODD_VALUE",
		2: "SMALLER_THEN_VALUE",
		3: "BIGGER_THEN_VALUE",
		4: "RANGE_VALUE",
		5: "ALL_VALUE",
	}
	FilterValue_value = map[string]int32{
		"EQUAL_VALUE":        0,
		"ODD_VALUE":          1,
		"SMALLER_THEN_VALUE": 2,
		"BIGGER_THEN_VALUE":  3,
		"RANGE_VALUE":        4,
		"ALL_VALUE":          5,
	}
)

func (x FilterValue) Enum() *FilterValue {
	p := new(FilterValue)
	*p = x
	return p
}

func (x FilterValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterValue) Descriptor() protoreflect.EnumDescriptor {
	return file_IoT_proto_enumTypes[6].Descriptor()
}

func (FilterValue) Type() protoreflect.EnumType {
	return &file_IoT_proto_enumTypes[6]
}

func (x FilterValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterValue.Descriptor instead.
func (FilterValue) EnumDescriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{6}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{0}
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Location   string     `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	DeviceType DeviceType `protobuf:"varint,4,opt,name=DeviceType,proto3,enum=proto.DeviceType" json:"DeviceType,omitempty"`
	IPAddress  string     `protobuf:"bytes,5,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	Gateway    string     `protobuf:"bytes,6,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	SubnetMask string     `protobuf:"bytes,7,opt,name=SubnetMask,proto3" json:"SubnetMask,omitempty"`
	OPCUrl     string     `protobuf:"bytes,8,opt,name=OPCUrl,proto3" json:"OPCUrl,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Device) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_ARDUINO
}

func (x *Device) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *Device) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Device) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *Device) GetOPCUrl() string {
	if x != nil {
		return x.OPCUrl
	}
	return ""
}

type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceID uint32         `protobuf:"varint,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Name     string         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Location string         `protobuf:"bytes,4,opt,name=Location,proto3" json:"Location,omitempty"`
	DataType SensorDataType `protobuf:"varint,5,opt,name=DataType,proto3,enum=proto.SensorDataType" json:"DataType,omitempty"`
	// Arduino RaspberryPi
	GPIONum        int32    `protobuf:"varint,6,opt,name=GPIONum,proto3" json:"GPIONum,omitempty"`
	GPIOType       GPIOType `protobuf:"varint,7,opt,name=GPIOType,proto3,enum=proto.GPIOType" json:"GPIOType,omitempty"`
	PullUpResistor bool     `protobuf:"varint,8,opt,name=PullUpResistor,proto3" json:"PullUpResistor,omitempty"`
	// PLC
	PLCDataArea PLCDataArea `protobuf:"varint,9,opt,name=PLCDataArea,proto3,enum=proto.PLCDataArea" json:"PLCDataArea,omitempty"`
	DataOffset  int32       `protobuf:"varint,10,opt,name=DataOffset,proto3" json:"DataOffset,omitempty"`
	BoolIndex   int32       `protobuf:"varint,11,opt,name=BoolIndex,proto3" json:"BoolIndex,omitempty"`
	DbNum       int32       `protobuf:"varint,12,opt,name=DbNum,proto3" json:"DbNum,omitempty"`
	// OPC
	NodeID string `protobuf:"bytes,13,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{2}
}

func (x *Sensor) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Sensor) GetDeviceID() uint32 {
	if x != nil {
		return x.DeviceID
	}
	return 0
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Sensor) GetDataType() SensorDataType {
	if x != nil {
		return x.DataType
	}
	return SensorDataType_BOOL
}

func (x *Sensor) GetGPIONum() int32 {
	if x != nil {
		return x.GPIONum
	}
	return 0
}

func (x *Sensor) GetGPIOType() GPIOType {
	if x != nil {
		return x.GPIOType
	}
	return GPIOType_Input
}

func (x *Sensor) GetPullUpResistor() bool {
	if x != nil {
		return x.PullUpResistor
	}
	return false
}

func (x *Sensor) GetPLCDataArea() PLCDataArea {
	if x != nil {
		return x.PLCDataArea
	}
	return PLCDataArea_DB
}

func (x *Sensor) GetDataOffset() int32 {
	if x != nil {
		return x.DataOffset
	}
	return 0
}

func (x *Sensor) GetBoolIndex() int32 {
	if x != nil {
		return x.BoolIndex
	}
	return 0
}

func (x *Sensor) GetDbNum() int32 {
	if x != nil {
		return x.DbNum
	}
	return 0
}

func (x *Sensor) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceID     uint32          `protobuf:"varint,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Name         string          `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Running      bool            `protobuf:"varint,4,opt,name=Running,proto3" json:"Running,omitempty"`
	RecordSensor []*RecordSensor `protobuf:"bytes,5,rep,name=RecordSensor,proto3" json:"RecordSensor,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{3}
}

func (x *Record) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Record) GetDeviceID() uint32 {
	if x != nil {
		return x.DeviceID
	}
	return 0
}

func (x *Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Record) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *Record) GetRecordSensor() []*RecordSensor {
	if x != nil {
		return x.RecordSensor
	}
	return nil
}

type RecordSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorID        uint32     `protobuf:"varint,1,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	RecordType      RecordType `protobuf:"varint,2,opt,name=RecordType,proto3,enum=proto.RecordType" json:"RecordType,omitempty"`
	TriggerValueMin string     `protobuf:"bytes,3,opt,name=TriggerValueMin,proto3" json:"TriggerValueMin,omitempty"`
	TriggerValueMax string     `protobuf:"bytes,4,opt,name=TriggerValueMax,proto3" json:"TriggerValueMax,omitempty"`
	Interval        float64    `protobuf:"fixed64,5,opt,name=interval,proto3" json:"interval,omitempty"` // Represent in seconds
}

func (x *RecordSensor) Reset() {
	*x = RecordSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSensor) ProtoMessage() {}

func (x *RecordSensor) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSensor.ProtoReflect.Descriptor instead.
func (*RecordSensor) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{4}
}

func (x *RecordSensor) GetSensorID() uint32 {
	if x != nil {
		return x.SensorID
	}
	return 0
}

func (x *RecordSensor) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_EQUAL
}

func (x *RecordSensor) GetTriggerValueMin() string {
	if x != nil {
		return x.TriggerValueMin
	}
	return ""
}

func (x *RecordSensor) GetTriggerValueMax() string {
	if x != nil {
		return x.TriggerValueMax
	}
	return ""
}

func (x *RecordSensor) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type RecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SensorID  uint32                 `protobuf:"varint,2,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	DataType  SensorDataType         `protobuf:"varint,3,opt,name=DataType,proto3,enum=proto.SensorDataType" json:"DataType,omitempty"`
	Value     string                 `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RecordData) Reset() {
	*x = RecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData) ProtoMessage() {}

func (x *RecordData) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData.ProtoReflect.Descriptor instead.
func (*RecordData) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{5}
}

func (x *RecordData) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RecordData) GetSensorID() uint32 {
	if x != nil {
		return x.SensorID
	}
	return 0
}

func (x *RecordData) GetDataType() SensorDataType {
	if x != nil {
		return x.DataType
	}
	return SensorDataType_BOOL
}

func (x *RecordData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RecordData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type RecordDataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SensorID    uint32      `protobuf:"varint,2,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	FilterValue FilterValue `protobuf:"varint,3,opt,name=FilterValue,proto3,enum=proto.FilterValue" json:"FilterValue,omitempty"`
	MinValue    string      `protobuf:"bytes,4,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
	MaxValue    string      `protobuf:"bytes,6,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	FilterTime  FilterTime  `protobuf:"varint,8,opt,name=FilterTime,proto3,enum=proto.FilterTime" json:"FilterTime,omitempty"`
}

func (x *RecordDataFilter) Reset() {
	*x = RecordDataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoT_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataFilter) ProtoMessage() {}

func (x *RecordDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_IoT_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataFilter.ProtoReflect.Descriptor instead.
func (*RecordDataFilter) Descriptor() ([]byte, []int) {
	return file_IoT_proto_rawDescGZIP(), []int{6}
}

func (x *RecordDataFilter) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RecordDataFilter) GetSensorID() uint32 {
	if x != nil {
		return x.SensorID
	}
	return 0
}

func (x *RecordDataFilter) GetFilterValue() FilterValue {
	if x != nil {
		return x.FilterValue
	}
	return FilterValue_EQUAL_VALUE
}

func (x *RecordDataFilter) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *RecordDataFilter) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *RecordDataFilter) GetFilterTime() FilterTime {
	if x != nil {
		return x.FilterTime
	}
	return FilterTime_NOW
}

var File_IoT_proto protoreflect.FileDescriptor

var file_IoT_proto_rawDesc = []byte{
	0x0a, 0x09, 0x49, 0x6f, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xeb, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x50, 0x43, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4f, 0x50, 0x43, 0x55, 0x72, 0x6c, 0x22, 0xa8, 0x03, 0x0a, 0x06, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x50, 0x49, 0x4f, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x50, 0x49, 0x4f, 0x4e, 0x75, 0x6d, 0x12, 0x2b,
	0x0a, 0x08, 0x47, 0x50, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x47, 0x50, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x75, 0x6c, 0x6c, 0x55, 0x70, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x70, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72,
	0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x50, 0x4c,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6f,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x62, 0x4e, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x62, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x2a, 0x64, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x44, 0x55, 0x49, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x41, 0x53, 0x50, 0x42, 0x45, 0x52, 0x52, 0x59, 0x50, 0x49, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x43, 0x5f, 0x53, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x43, 0x5f, 0x42, 0x65, 0x63, 0x6b, 0x68, 0x6f, 0x66, 0x66,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x43, 0x5f, 0x57, 0x41, 0x47, 0x4f, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x50, 0x43, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x0e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x2a, 0x44, 0x0a, 0x08, 0x47, 0x50, 0x49,
	0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x03, 0x2a,
	0x35, 0x0a, 0x0b, 0x50, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x12, 0x06,
	0x0a, 0x02, 0x44, 0x42, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4b, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x50, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x41, 0x10, 0x03, 0x12, 0x06,
	0x0a, 0x02, 0x43, 0x54, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x44, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53,
	0x10, 0x05, 0x2a, 0x7c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x32, 0x34, 0x48, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x36, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x07,
	0x2a, 0x7c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x44, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x32, 0xf8,
	0x06, 0x0a, 0x0a, 0x49, 0x6f, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x2d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x35, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x49,
	0x6f, 0x54, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_IoT_proto_rawDescOnce sync.Once
	file_IoT_proto_rawDescData = file_IoT_proto_rawDesc
)

func file_IoT_proto_rawDescGZIP() []byte {
	file_IoT_proto_rawDescOnce.Do(func() {
		file_IoT_proto_rawDescData = protoimpl.X.CompressGZIP(file_IoT_proto_rawDescData)
	})
	return file_IoT_proto_rawDescData
}

var file_IoT_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_IoT_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_IoT_proto_goTypes = []interface{}{
	(DeviceType)(0),               // 0: proto.DeviceType
	(SensorDataType)(0),           // 1: proto.SensorDataType
	(GPIOType)(0),                 // 2: proto.GPIOType
	(PLCDataArea)(0),              // 3: proto.PLCDataArea
	(RecordType)(0),               // 4: proto.RecordType
	(FilterTime)(0),               // 5: proto.FilterTime
	(FilterValue)(0),              // 6: proto.FilterValue
	(*Empty)(nil),                 // 7: proto.Empty
	(*Device)(nil),                // 8: proto.Device
	(*Sensor)(nil),                // 9: proto.Sensor
	(*Record)(nil),                // 10: proto.Record
	(*RecordSensor)(nil),          // 11: proto.RecordSensor
	(*RecordData)(nil),            // 12: proto.RecordData
	(*RecordDataFilter)(nil),      // 13: proto.RecordDataFilter
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
}
var file_IoT_proto_depIdxs = []int32{
	0,  // 0: proto.Device.DeviceType:type_name -> proto.DeviceType
	1,  // 1: proto.Sensor.DataType:type_name -> proto.SensorDataType
	2,  // 2: proto.Sensor.GPIOType:type_name -> proto.GPIOType
	3,  // 3: proto.Sensor.PLCDataArea:type_name -> proto.PLCDataArea
	11, // 4: proto.Record.RecordSensor:type_name -> proto.RecordSensor
	4,  // 5: proto.RecordSensor.RecordType:type_name -> proto.RecordType
	1,  // 6: proto.RecordData.DataType:type_name -> proto.SensorDataType
	14, // 7: proto.RecordData.Timestamp:type_name -> google.protobuf.Timestamp
	6,  // 8: proto.RecordDataFilter.FilterValue:type_name -> proto.FilterValue
	5,  // 9: proto.RecordDataFilter.FilterTime:type_name -> proto.FilterTime
	8,  // 10: proto.IoTService.CreateDevice:input_type -> proto.Device
	8,  // 11: proto.IoTService.UpdateDevice:input_type -> proto.Device
	8,  // 12: proto.IoTService.DeleteDevice:input_type -> proto.Device
	8,  // 13: proto.IoTService.GetDevice:input_type -> proto.Device
	7,  // 14: proto.IoTService.GetDevices:input_type -> proto.Empty
	9,  // 15: proto.IoTService.CreateSensor:input_type -> proto.Sensor
	9,  // 16: proto.IoTService.UpdateSensor:input_type -> proto.Sensor
	9,  // 17: proto.IoTService.DeleteSensor:input_type -> proto.Sensor
	9,  // 18: proto.IoTService.GetSensor:input_type -> proto.Sensor
	8,  // 19: proto.IoTService.GetSensors:input_type -> proto.Device
	10, // 20: proto.IoTService.CreateRecord:input_type -> proto.Record
	10, // 21: proto.IoTService.UpdateRecord:input_type -> proto.Record
	10, // 22: proto.IoTService.DeleteRecord:input_type -> proto.Record
	10, // 23: proto.IoTService.GetRecord:input_type -> proto.Record
	8,  // 24: proto.IoTService.GetRecords:input_type -> proto.Device
	12, // 25: proto.IoTService.CreateRecordData:input_type -> proto.RecordData
	13, // 26: proto.IoTService.GetRecordData:input_type -> proto.RecordDataFilter
	12, // 27: proto.IoTService.DeleteRecordData:input_type -> proto.RecordData
	7,  // 28: proto.IoTService.CreateDevice:output_type -> proto.Empty
	7,  // 29: proto.IoTService.UpdateDevice:output_type -> proto.Empty
	7,  // 30: proto.IoTService.DeleteDevice:output_type -> proto.Empty
	8,  // 31: proto.IoTService.GetDevice:output_type -> proto.Device
	8,  // 32: proto.IoTService.GetDevices:output_type -> proto.Device
	7,  // 33: proto.IoTService.CreateSensor:output_type -> proto.Empty
	7,  // 34: proto.IoTService.UpdateSensor:output_type -> proto.Empty
	7,  // 35: proto.IoTService.DeleteSensor:output_type -> proto.Empty
	9,  // 36: proto.IoTService.GetSensor:output_type -> proto.Sensor
	9,  // 37: proto.IoTService.GetSensors:output_type -> proto.Sensor
	7,  // 38: proto.IoTService.CreateRecord:output_type -> proto.Empty
	7,  // 39: proto.IoTService.UpdateRecord:output_type -> proto.Empty
	7,  // 40: proto.IoTService.DeleteRecord:output_type -> proto.Empty
	10, // 41: proto.IoTService.GetRecord:output_type -> proto.Record
	10, // 42: proto.IoTService.GetRecords:output_type -> proto.Record
	7,  // 43: proto.IoTService.CreateRecordData:output_type -> proto.Empty
	12, // 44: proto.IoTService.GetRecordData:output_type -> proto.RecordData
	7,  // 45: proto.IoTService.DeleteRecordData:output_type -> proto.Empty
	28, // [28:46] is the sub-list for method output_type
	10, // [10:28] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_IoT_proto_init() }
func file_IoT_proto_init() {
	if File_IoT_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_IoT_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoT_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_IoT_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_IoT_proto_goTypes,
		DependencyIndexes: file_IoT_proto_depIdxs,
		EnumInfos:         file_IoT_proto_enumTypes,
		MessageInfos:      file_IoT_proto_msgTypes,
	}.Build()
	File_IoT_proto = out.File
	file_IoT_proto_rawDesc = nil
	file_IoT_proto_goTypes = nil
	file_IoT_proto_depIdxs = nil
}
